INSTRUCCIONES DE TRANSFERENCIA DE DATOS:
MOV AX,BX		Almacena el contenido de BX en AX
XCHG AX,BX		Intercambia el contenido de AX y BX
XLAT			Almacena en AL el contenido de la direccion [BX+AL]
LEA AX,[BX]		Almacena en AX la direccion de memoria fisica o efectiva de BX
LDS/LES AX,[1000h]	Carga el contenido de una memoria de 32bits; parte baja en AX y el resto en DS o ES
PUSH AX			Inserta AX en la pila
POP DS			Carga el primer elemento de la pila en DS
PUSHF AX		Apila el registro AX
POPF AX			Desapila el registro AX
LAHF AX			Carga la parte baja del registro en AH
SAHF AX			Carga la parte alta del registro en AL

INSTRUCCIONES ARITMETICAS:
ADD/ADC AX, BX		Suma BX Y AX y almacena en AX. ADC aplica acarreos.
DAA AX,BX		Realiza una suma en AL con la correccion BCD empaquetado.
	*Si AF=1 o valor de 4bits menos significativos > 9, suma a AL el valor 06h
	*Si CF=1 o valor de 4bits mas significativos > 9, suma a AL el valor 60h
	*Afecta a OF,SF,ZF,AF,PF
SUB/SBB AX, BX		Resta AX con BX y lo almacena en AX. SBB aplica acarreos.
DAS AX,BX		Realiza una resta en AL con correccion BCD empaquetado.
NEG AX			Cambia el signo de AX
MUL/IMUL BX		Realiza una multiplicacion. IMUL aplica signos.
	*Almacena en AX para operaciones de 8 bits
	*Almacena en DX:AX para operaciones de 16 bits
DIV/IDIV BX		Realiza una division. IDIV aplica signos.
	*Almacena el cociente en AL y el resto en AH para operaciones de 8 bits
	*Almacena en DX(RESTO):AX(COCIENTE) para operaciones de 16 bits
CBW/CWD			Realiza extension del bit de signo de byte a WORD. CWD lo mismo pero de WORD a DWORD
	*Actua sobre AX y DX:AX
INC AX			Incrementa +1
DEC AX	 		Decrementa -1

INSTRUCCIONES LOGICAS:
OR AX,BX		Operacion logica or
AND AX,BX		Operacion logica and
XOR AX,BX		Operacion logica xor

INSTRUCCIONES DE COMPARACION:
TEST AX,BX		Operacion logica and
	*No afecta a ningun registro
	*Solo afecta al registro de estado
CMP AX,BX		Operacion de resta
	*No afecta a ningun registro
	*Solo afecta al registro de estado

INSTRUCCIONES DE DESPLAZAMIENTO Y ROTACIONES:
SAL/SHL AX,1 o CL	Desplaza a izquierda de AX una cantidad de X bits
	*SHL Introduce un 0 y guarda el bit que sale en el bit CF del registro de estado
SAR/SHR AX,1 o CL	Desplaza a derecha de AX una cantidad de X bits
	*SHR Repite el bit de signo y guarda el resultado en el bit CF del registro de estado
RCL AX,1 o CL			Realiza la rotacion a izquierda de los bits del operando a traves del bit CF del registro de estado 
RCR AX,1 o CL			Realiza la rotacion a la derecha de los bits del operando a traves del bit CF del registro de estado
ROL AX,1 o CL			Realiza la rotacion a izquierda de los bits del operando, ignorando el bit CF del registro de estado
	*El bit que rota es almacenado en CF
ROR AX,1 o CL			Realiza la rotacion a derecha de los bits del operando, ignorando el bit CF del registro de estado

INSTRUCCIONES DE ENTRADA/SALIDA:
IN AX,X o DX			Realiza lectura de un puerto (solo si la direccion es < 255)
OUT AX,X o DX			Realiza escritura en un puerto (solo si la direccion es < 255)

INSTRUCCIONES DE CONTROL DEL PROGRAMA:
-INSTRUCCIONES DE SALTO
	*Todas cambian el registro IP
	*Si es salto lejano tambien cambia el registro CS (que no este en el mismo segmento de codigo)
	*Saltos absolutos (direccion absoluta especificada. Admite a memoria o registro si es cercano. Admite un valor o una direccion de memoria si es lejano) o Saltos relativos (hacia atras o adelante desde el IP. 8 o 16 bits. No puede ser lejano)
JPM				Realiza un salto incondicional a la direccion especificada
CALL				Realiza una llamada a un procedimiento externo
	*Si es cercano almacena IP en pila
	*Si es lejano almacena IP y CS en pila
	*Modifica el SP
RET X				Realiza un devolucion al procedimiento del programa, return
	*Se recuperan los valores IP y CS almacenados en pila
	*Para dejar la pila como estaba se puede usar POP o RET n (n=numero de posiciones a descartar en la pila)
-INSTRUCCIONES DE BUCLE
LOOP 				Realiza un salto n veces siempre y cuando CX sea distinto de 0 y cada vez este decrementa en 1
LOOPNE/LOOPNZ			Realiza un salto n veces siempre y cuando CX sea distinto de 0 y ZF sea igual a 0
LOOPE/LOOPZ			Realiza un salto n veces siempre y cuando CX sea distinto de 0 y ZF sea igual a 1
JCXZ				Realiza un salto n veces siempre y cuando CX sea igual a 0

INTRUCCIONES DE CADENA DE CARACTERES:
REP				Repite la instruccion a la que acompaña siempre y cuando CX sea distinto de 0
	*Se puede usar con MOVS,MOVDSW o STOS
REPE/REPZ			Repite la instruccion a la que acompaña siempre y cuando CX sea distinto de 0 y ZF sea igual a 1
	*Se puede usar con CMPS o SCAS
REPNE/REPNZ			Repite la instruccion a la que acompaña siempre y cuando CX sea distinto de 0 y ZF sea igual a 0
	*Se puede usar con CMPS o SCAS
MOVS/MOVSW dest,fuent		Copia un byte o un WORD de una parte de memoria a otra
	*El destino es ES:DI
	*La fuente es DS:SI (cargar los valores antes de utilizar la instruccion)
	*Pasos: colocar el bit DF al valor correcto - cargar en SI el desplazamiento de la fuente - cargar en DI el desplazamiento del destino - cargar en CX el numero de elementos a mover - ejecutar la instruccion MOVS/MOVSB con el prefijo REP
CMPS dest,fuent			Realiza una comparacion de 2 cadenas, devuelve el resultado en el registro de estado	
	*Mismos pasos que MOVS pero aplicando el modificador REPE/REPZ o REPNE/REPNZ
	*Afecta todos los bits del registro de estado
SCAS/SCASW dest			Localiza el valor contenido en AL o AX en una cadena, si encuentra el elemento, devuelve en DI el desplazamiento del siguiente
	*Es necesario cargar en DI el desplazamiento del primer elemento de la cadena
	*Afecta a todos los bits del registro de estado
LODS/LODSW fuent		Transfiere un elemento de una cadena a AL o AX
	*La fuente debe estar cargada en SI
STOS/STOSW dest			Transfiere contenido de AL o AX a una cadena
	*El desplazamiento de la cadena debe cargarse en DI

OTRAS INSTRUCCIONES:
HLT				Para el procesador, solo se puede salir reiniciando o con una interrupcion externa
LOCK instruccion		Bloquea el acceso al bus por parte de otro dispositivo mientras se ejecute la instruccion a la que acompaña
WAIT				Genera estados de espera en el procesador hasta que se active TEST
CLC/STC				Pone en 0 o 1 el bit CF del registro de estado
CMC				Cambia el valor del bit CF del registro de estado
CLI/STI				Pone en 0 o 1 el bit IF del registro de estado
CLD/STD				Pone en 0 o 1 el bit DF del registro de estado
NOP				Hace que el procesador ejecute NADA
			






